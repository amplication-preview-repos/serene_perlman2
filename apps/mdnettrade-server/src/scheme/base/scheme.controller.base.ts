/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SchemeService } from "../scheme.service";
import { SchemeCreateInput } from "./SchemeCreateInput";
import { Scheme } from "./Scheme";
import { SchemeFindManyArgs } from "./SchemeFindManyArgs";
import { SchemeWhereUniqueInput } from "./SchemeWhereUniqueInput";
import { SchemeUpdateInput } from "./SchemeUpdateInput";
import { InvestmentFindManyArgs } from "../../investment/base/InvestmentFindManyArgs";
import { Investment } from "../../investment/base/Investment";
import { InvestmentWhereUniqueInput } from "../../investment/base/InvestmentWhereUniqueInput";

export class SchemeControllerBase {
  constructor(protected readonly service: SchemeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Scheme })
  async createScheme(@common.Body() data: SchemeCreateInput): Promise<Scheme> {
    return await this.service.createScheme({
      data: data,
      select: {
        createdAt: true,
        duration: true,
        durationUnit: true,
        fixedReturnPrice: true,
        id: true,
        name: true,
        price: true,
        returnPercentage: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Scheme] })
  @ApiNestedQuery(SchemeFindManyArgs)
  async schemes(@common.Req() request: Request): Promise<Scheme[]> {
    const args = plainToClass(SchemeFindManyArgs, request.query);
    return this.service.schemes({
      ...args,
      select: {
        createdAt: true,
        duration: true,
        durationUnit: true,
        fixedReturnPrice: true,
        id: true,
        name: true,
        price: true,
        returnPercentage: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Scheme })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async scheme(
    @common.Param() params: SchemeWhereUniqueInput
  ): Promise<Scheme | null> {
    const result = await this.service.scheme({
      where: params,
      select: {
        createdAt: true,
        duration: true,
        durationUnit: true,
        fixedReturnPrice: true,
        id: true,
        name: true,
        price: true,
        returnPercentage: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Scheme })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateScheme(
    @common.Param() params: SchemeWhereUniqueInput,
    @common.Body() data: SchemeUpdateInput
  ): Promise<Scheme | null> {
    try {
      return await this.service.updateScheme({
        where: params,
        data: data,
        select: {
          createdAt: true,
          duration: true,
          durationUnit: true,
          fixedReturnPrice: true,
          id: true,
          name: true,
          price: true,
          returnPercentage: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Scheme })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteScheme(
    @common.Param() params: SchemeWhereUniqueInput
  ): Promise<Scheme | null> {
    try {
      return await this.service.deleteScheme({
        where: params,
        select: {
          createdAt: true,
          duration: true,
          durationUnit: true,
          fixedReturnPrice: true,
          id: true,
          name: true,
          price: true,
          returnPercentage: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/investments")
  @ApiNestedQuery(InvestmentFindManyArgs)
  async findInvestments(
    @common.Req() request: Request,
    @common.Param() params: SchemeWhereUniqueInput
  ): Promise<Investment[]> {
    const query = plainToClass(InvestmentFindManyArgs, request.query);
    const results = await this.service.findInvestments(params.id, {
      ...query,
      select: {
        amountInvested: true,
        createdAt: true,
        endDate: true,
        id: true,

        scheme: {
          select: {
            id: true,
          },
        },

        startDate: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/investments")
  async connectInvestments(
    @common.Param() params: SchemeWhereUniqueInput,
    @common.Body() body: InvestmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      investments: {
        connect: body,
      },
    };
    await this.service.updateScheme({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/investments")
  async updateInvestments(
    @common.Param() params: SchemeWhereUniqueInput,
    @common.Body() body: InvestmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      investments: {
        set: body,
      },
    };
    await this.service.updateScheme({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/investments")
  async disconnectInvestments(
    @common.Param() params: SchemeWhereUniqueInput,
    @common.Body() body: InvestmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      investments: {
        disconnect: body,
      },
    };
    await this.service.updateScheme({
      where: params,
      data,
      select: { id: true },
    });
  }
}
